"""
Tests for Vulnerability model
"""

import pytest
from src.models import Vulnerability, Severity


def test_vulnerability_creation():
    """Test creating a vulnerability"""
    vuln = Vulnerability.create(
        id="TEST-001",
        title="Test Vulnerability",
        description="This is a test vulnerability",
        severity=Severity.HIGH,
        category="Testing",
        remediation="Fix the issue"
    )
    
    assert vuln.id == "TEST-001"
    assert vuln.title == "Test Vulnerability"
    assert vuln.severity == Severity.HIGH
    assert vuln.category == "Testing"


def test_vulnerability_severity_color():
    """Test severity color mapping"""
    critical = Vulnerability.create(
        id="T-1", title="Critical", description="Test",
        severity=Severity.CRITICAL, category="Test", remediation="Fix"
    )
    assert critical.severity_color == "red"
    
    high = Vulnerability.create(
        id="T-2", title="High", description="Test",
        severity=Severity.HIGH, category="Test", remediation="Fix"
    )
    assert high.severity_color == "orange1"
    
    low = Vulnerability.create(
        id="T-3", title="Low", description="Test",
        severity=Severity.LOW, category="Test", remediation="Fix"
    )
    assert low.severity_color == "blue"


def test_vulnerability_to_dict():
    """Test converting vulnerability to dictionary"""
    vuln = Vulnerability.create(
        id="TEST-002",
        title="Test",
        description="Description",
        severity=Severity.MEDIUM,
        category="Test",
        remediation="Fix it"
    )
    
    vuln_dict = vuln.to_dict()
    
    assert isinstance(vuln_dict, dict)
    assert vuln_dict["id"] == "TEST-002"
    assert vuln_dict["severity"] == "MEDIUM"


def test_vulnerability_with_optional_fields():
    """Test vulnerability with all optional fields"""
    vuln = Vulnerability.create(
        id="TEST-003",
        title="Complete Test",
        description="Full test",
        severity=Severity.CRITICAL,
        category="Security",
        remediation="Fix now",
        cwe_id="CWE-123",
        cvss_score=9.8,
        evidence=["Evidence 1", "Evidence 2"],
        affected_component="Component X",
        references=["https://example.com"]
    )
    
    assert vuln.cwe_id == "CWE-123"
    assert vuln.cvss_score == 9.8
    assert len(vuln.evidence) == 2
    assert len(vuln.references) == 1
