"""
Vulnerability data model
Represents security issues found during scanning
"""

from datetime import datetime
from enum import Enum
from typing import Optional, List

from pydantic import BaseModel, Field


class Severity(str, Enum):
    """Vulnerability severity levels"""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"


class Vulnerability(BaseModel):
    """Represents a security vulnerability"""
    
    id: str = Field(description="Unique vulnerability ID")
    title: str = Field(description="Vulnerability title")
    description: str = Field(description="Detailed description")
    severity: Severity = Field(description="Severity level")
    
    # Details
    category: str = Field(description="Vulnerability category (e.g., 'Authentication')")
    cwe_id: Optional[str] = Field(default=None, description="CWE identifier")
    cvss_score: Optional[float] = Field(default=None, description="CVSS score")
    
    # Evidence
    evidence: List[str] = Field(default_factory=list, description="Evidence of vulnerability")
    affected_component: Optional[str] = Field(default=None, description="Affected component")
    
    # Remediation
    remediation: str = Field(description="Remediation guidance")
    references: List[str] = Field(default_factory=list, description="Reference links")
    
    # Metadata
    discovered_at: datetime = Field(default_factory=datetime.now)
    
    @property
    def severity_color(self) -> str:
        """Get color for severity level"""
        colors = {
            Severity.CRITICAL: "red",
            Severity.HIGH: "orange1",
            Severity.MEDIUM: "yellow",
            Severity.LOW: "blue",
            Severity.INFO: "green"
        }
        return colors.get(self.severity, "white")
    
    def to_dict(self) -> dict:
        """Convert to dictionary"""
        return self.model_dump()
    
    @classmethod
    def create(
        cls,
        id: str,
        title: str,
        description: str,
        severity: Severity,
        category: str,
        remediation: str,
        **kwargs
    ) -> "Vulnerability":
        """Factory method to create vulnerability"""
        return cls(
            id=id,
            title=title,
            description=description,
            severity=severity,
            category=category,
            remediation=remediation,
            **kwargs
        )
